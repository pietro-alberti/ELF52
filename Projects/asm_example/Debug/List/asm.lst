###############################################################################
#                                                                             #
#     IAR Assembler V9.10.2.313/W64 for ARM 12/Aug/2021  18:30:09             #
#     Copyright 1999-2021 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  D:\Pietro\Micro\ELF52\Projects\asm_example\src\asm.s#
#           List file     =  D:\Pietro\Micro\ELF52\Projects\asm_example\Debug\List\asm.lst#
#           Object file   =  D:\Pietro\Micro\ELF52\Projects\asm_example\Debug\Obj\asm.o#
#           Command line  =  -f                                               #
#                            D:\Pietro\Micro\ELF52\Projects\asm_example\Debug\Obj\asm.o.rsp #
#                            (D:\Pietro\Micro\ELF52\Projects\asm_example\src\asm.s #
#                            -OD:\Pietro\Micro\ELF52\Projects\asm_example\Debug\Obj\ #
#                            -s+ -M<> -w+ -r                                  #
#                            -LD:\Pietro\Micro\ELF52\Projects\asm_example\Debug\List\ #
#                            -t8 --cpu Cortex-M4 --fpu VFPv4_sp)              #
#                                                                             #
###############################################################################

    1                            PUBLIC  __iar_program_start
    2                                   EXTERN  __vector_table
    3                           
    4                                   SECTION .text:CODE:REORDER(2)
    5                                   
    6                                   ;; Keep vector table even if it's not
                                 referenced
    7                                   REQUIRE __vector_table
    8                                   
    9                                   THUMB
   10                           
   11                           ; System Control definitions
   12                           SYSCTL_BASE             EQU     0x400FE000
   13                           SYSCTL_RCGCGPIO         EQU     0x0608        
                                          
   14                           SYSCTL_RCGCGPIO_R       EQU     0x400FE608    
                                          ; Run-mode Clock Gating -> Inicializa
                                cao -> Habilita clock
   15                           SYSCTL_PRGPIO           EQU     0x0A08        
                                  
   16                           SYSCTL_PRGPIO_R         EQU     0x400FEA08    
                                          ; Peripheral Ready      -> Inicializa
                                cao -> Indica se a porta GPIO está pronta para
                                 uso
   17                           SYSCTL_RCGCUART         EQU     0x0618
   18                           SYSCTL_PRUART           EQU     0x0A18
   19                           ; System Control bit definitions
   20                           PORTA_BIT               EQU     00000000000000
                                1b        ; Define quantos bits que pode se
                                 escrever na porta a -> datasheet
   21                           PORTF_BIT               EQU     00000000001000
                                00b       ; Define quantos bits que pode se
                                 escrever na porta f -> datasheet
   22                           PORTJ_BIT               EQU     00000001000000
                                00b       ; Define quantos bits que pode se
                                 escrever na porta j -> datasheet
   23                           PORTN_BIT               EQU     00010000000000
                                00b       ; Define quantos bits que pode se
                                 escrever na porta n -> datasheet
   24                           UART0_BIT               EQU     00000001b     
                                          ; Define quantos bits que pode se
                                 escrever na porta o -> datasheet
   25                           
   26                           ; NVIC definitions
   27                           NVIC_BASE               EQU     0xE000E000
   28                           NVIC_EN1                EQU     0x0104
   29                           VIC_DIS1                EQU     0x0184
   30                           NVIC_PEND1              EQU     0x0204
   31                           NVIC_UNPEND1            EQU     0x0284
   32                           NVIC_ACTIVE1            EQU     0x0304
   33                           NVIC_PRI12              EQU     0x0430
   34                           
   35                           ; GPIO Port definitions
   36                           GPIO_PORTA_BASE         EQU     0x40058000
   37                           GPIO_PORTF_BASE         EQU     0x4005D000
   38                           GPIO_PORTJ_BASE         EQU     0x40060000
   39                           GPIO_PORTN_BASE         EQU     0x40064000
   40                           GPIO_DIR                EQU     0x0400        
                                          ; GPIO_DIR (Direction) -> entrada ou
                                 saida
   41                           GPIO_IS                 EQU     0x0404        
                                          ; borda ou nivel
   42                           GPIO_IBE                EQU     0x0408        
                                          ; borda
   43                           GPIO_IEV                EQU     0x040C        
                                          ; borda de subida ou descida
   44                           GPIO_IM                 EQU     0x0410        
                                          ; habilitar interrupcao
   45                           GPIO_RIS                EQU     0x0414        
                                          ; indica se houve condicoes para
                                 interrup. mesmo sem GPIO_IM 
   46                           GPIO_MIS                EQU     0x0418        
                                          ; indica se houve cond para ativar
                                 interrup. e a mesma esta declarada em
                                 GPIO_IM
   47                           GPIO_ICR                EQU     0x041C        
                                          ; ACK da interrupcao -> precisa dela
                                 para poder realizar uma nova interrup.
   48                           GPIO_AFSEL              EQU     0x0420
   49                           GPIO_PUR                EQU     0x0510
   50                           GPIO_DEN                EQU     0x051C        
                                          ; GPIO_DEN (Digital Enable) ->
                                 Habilitar funcao digital
   51                           GPIO_PCTL               EQU     0x052C
   52                           
   53                           ; UART definitions
   54                           UART_PORT0_BASE         EQU     0x4000C000
   55                           UART_FR                 EQU     0x0018
   56                           UART_IBRD               EQU     0x0024
   57                           UART_FBRD               EQU     0x0028
   58                           UART_LCRH               EQU     0x002C
   59                           UART_CTL                EQU     0x0030
   60                           UART_CC                 EQU     0x0FC8
   61                           
   62                           ;UART bit definitions
   63                           TXFE_BIT                EQU     10000000b     
                                          ; TX FIFO full
   64                           RXFF_BIT                EQU     01000000b     
                                          ; RX FIFO empty
   65                           BUSY_BIT                EQU     00001000b     
                                          ; Busy
   66                           
   67                           ; Tempo de delay
   68                           DELAY                    EQU     0x005F       
                                          ; tempo de delay
   69                           
   70                           ; PROGRAMA PRINCIPAL
   71                           
   72                           __iar_program_start
   73                           
   74                           main:   
   75    00000000 4FF00102              MOV R2, #(UART0_BIT)
   76    00000004 00F091F8              BL UART_enable                         
                                                     ; habilita UART0
   77                           
   78    00000008 4FF00100              MOV R0, #(PORTA_BIT)
   79    0000000C 00F0CFF8              BL Enable_port                         
                                                     ; habilita clock ao port A
                                             -> GPIO
   80                                   
   81    00000010 BA48                  LDR R0, =GPIO_PORTA_BASE
   82    00000012 4FF00301              MOV R1, #00000011b                     
                                                          ; bits 0 e 1 como
                                                  especiais
   83    00000016 00F0B0F8              BL GPIO_special
   84                           
   85    0000001A 4FF0FF01              MOV R1, #0xFF                          
                                                          ; máscara das funções
                                                  especiais no port A (bits 1 e
                                                  0)
   86    0000001E 4FF01102              MOV R2, #0x11                          
                                                          ; funções especiais
                                                  RX e TX no port A (UART)
   87    00000022 00F0B9F8              BL GPIO_select
   88                           
   89    00000026 B64A                  LDR R2, =UART_PORT0_BASE
   90    00000028 00F08FF8              BL UART_config                         
                                                     ; configura periférico
                                             UART0
   91                           
   92    0000002C B448                  LDR R0, =UART_PORT0_BASE               
                                                          ; nao lembro para o
                                                  que servia
   93                                                                         
                                          ; recepção e envio de dados pela UART
                                 utilizando sondagem (polling)
   94                                                                         
                                          ; resulta em um "eco": dados
                                 recebidos são retransmitidos pela UART
   95                           loop:
   96    0000002E 00F018F9              BL Reset_all
   97                           Make_num1:
   98    00000032 BAF1040F              CMP R10, #4                            
                                                            ; verefica se r3
                                                   tem menos de 4 digitos
   99    00000036 58BF                  IT PL
  100    00000038 00F024F8                BLPL Wait_for_operation
  101                           
  102    0000003C 00F069F8              BL Serial_read                         
                                                     ; le a serial e salva o
                                             valor em r1
  103    00000040 1E46                  MOV R6, R3                             
                                                          ; r6 = r3
  104                                   
  105    00000042 4329                  CMP R1, #67                            
                                                         ; se a entrada for C
                                                  finaliza a operação
  106    00000044 02BF                  ITTT EQ
  107    00000046 00F06AF8                BLEQ Serial_write
  108    0000004A 00F000F9                BLEQ New_line
  109    0000004E EEE7                    BEQ loop
  110                                   
  111    00000050 3D29                  CMP R1, #61                            
                                                          ; verifica se 61 é
                                                  sinal de =
  112    00000052 04BF                  ITT EQ                                 
                                                      ; se não for igual
                                              escreve o valor na serial
  113    00000054 00F0FBF8                BLEQ New_line
  114    00000058 E9E7                    BEQ loop
  115                                     
  116    0000005A 00F013F9              BL Check_operation                     
                                                     ; verefica se está
                                             recebendo um operando             
                                                              
  117    0000005E 002C                  CMP R4, #0                             
                                                          ; se estiver,
                                                  finaliza num1, salva a
                                                  operacao em r4
  118    00000060 82BF                  ITTT HI                                
                                                       ; e monta o numero
                                               2
  119    00000062 4FF0000A                MOVHI R10, #0
  120    00000066 00F05AF8                BLHI Serial_write
  121    0000006A 2AE0                    BHI Make_num2
  122                                   
  123    0000006C 00F03CF9              BL NAN                                 
                                                     ; Verifica se a entrada eh
                                             um numero, se não for ignora a
                                             leitura
  124    00000070 012F                  CMP R7, #1
  125    00000072 08BF                  IT EQ
  126    00000074 DDE7                    BEQ Make_num1
  127                           
  128                                   ; bla
  129                                   
  130    00000076 00F052F8              BL Serial_write
  131    0000007A 3EBF                  ITTT LO
  132    0000007C 00F0A4F8                BLLO Make_number                     
                                                         ; r6 = r3*10+r1 //
                                                 R10++
  133    00000080 3346                    MOVLO R3, R6                         
                                                              ; r3 = r6
  134    00000082 D6E7                    BLO Make_num1
  135                                     
  136                           Wait_for_operation:
  137    00000084 00F045F8              BL Serial_read
  138    00000088 3D29                  CMP R1, #61
  139    0000008A 08BF                  IT EQ
  140    0000008C 00F047F8                BLEQ Serial_write
  141    00000090 3D29                  CMP R1, #61
  142    00000092 01BF                  ITTTT EQ
  143    00000094 1946                    MOVEQ R1, R3                         
                                                            ; calcula o valor
                                                      de R3 e R5 com a operação
                                                      contida em R4            
                                                                     
  144    00000096 00F0A7F8                BLEQ Show_result
  145    0000009A 00F0D8F8                BLEQ New_line                        
                                                         ; e imprimi na
                                                 tela
  146    0000009E C6E7                    BEQ loop
  147                           
  148    000000A0 4329                  CMP R1, #67                            
                                                         ; se a entrada for C
                                                  finaliza a operação
  149    000000A2 02BF                  ITTT EQ
  150    000000A4 00F03BF8                BLEQ Serial_write
  151    000000A8 00F0D1F8                BLEQ New_line
  152    000000AC BFE7                    BEQ loop
  153                                     
  154    000000AE 00F0E9F8              BL Check_operation                     
                                                     ; verefica se está
                                             recebendo um operando             
                                                              
  155    000000B2 002C                  CMP R4, #0                             
                                                          ; se estiver, salva
                                                  em r4 e vai para Make_num2
  156    000000B4 82BF                  ITTT HI                                
                                                       
  157    000000B6 4FF0000A                MOVHI R10, #0
  158    000000BA 00F030F8                BLHI Serial_write
  159    000000BE 00E0                    BHI Make_num2
  160    000000C0 E0E7                  B Wait_for_operation
  161                           
  162                           Make_num2:
  163    000000C2 BAF1040F              CMP R10, #4                            
                                                           ; Se o segundo
                                                   numero ja tiver 4 digitos o
                                                   usuario
  164    000000C6 5EBF                  ITTT PL                                
                                                       ; nao precisa digitar
                                               igual
  165    000000C8 00F0E9F8                BLPL Calculate
  166    000000CC 00F0BFF8                BLPL New_line
  167    000000D0 ADE7                    BPL loop
  168                           
  169    000000D2 00F01EF8              BL Serial_read
  170    000000D6 2E46                  MOV R6, R5
  171                           
  172    000000D8 3D29                  CMP R1, #61
  173    000000DA 02BF                  ITTT EQ
  174    000000DC 00F0DFF8                BLEQ Calculate                       
                                                         ; calcula o valor de
                                                 R3 e R5 com a operação contida
                                                 em R4                         
                                                   
  175    000000E0 00F0B5F8                BLEQ New_line                        
                                                         ; e imprimi na
                                                 tela
  176    000000E4 A3E7                    BEQ loop
  177                           
  178    000000E6 4329                  CMP R1, #67                            
                                                         ; se a entrada for C
                                                  finaliza a operação
  179    000000E8 02BF                  ITTT EQ
  180    000000EA 00F018F8                BLEQ Serial_write
  181    000000EE 00F0AEF8                BLEQ New_line
  182    000000F2 9CE7                    BEQ loop
  183                                   
  184    000000F4 00F0F8F8              BL NAN                                 
                                                     ; Verifica se a entrada eh
                                             um numero, se não for ignora a
                                             leitura
  185    000000F8 012F                  CMP R7, #1
  186    000000FA 08BF                  IT EQ
  187    000000FC E1E7                    BEQ Make_num2
  188                           
  189    000000FE BAF1040F              CMP R10, #4                            
                                                            ; menor que 4
                                                   digitos
  190    00000102 3FBF                  ITTTT LO
  191    00000104 00F00BF8                BLLO Serial_write
  192    00000108 00F05EF8                BLLO Make_number                     
                                                         ; r6 = r5*10+r1 //
                                                 R10++
  193    0000010C 3546                    MOVLO R5, R6                         
                                                              ; r5 = r6
  194    0000010E D8E7                    BLO Make_num2
  195                           
  196    00000110 8DE7                  B loop  
  197                           ;=============================================
                                ==================================;
  198                           ;                       Le a serial e salva o
                                 valor em R1                       ;
  199                           ;                       -> Aux: R2            
                                                                  ;
  200                           ;=============================================
                                ==================================;
  201                           Serial_read:
  202    00000112 8269                  LDR R2, [R0, #UART_FR]                 
                                                          ; status da
                                                  UART
  203    00000114 12F0400F              TST R2, #RXFF_BIT                      
                                                          ; Verifica se o
                                                  receptor 
  204    00000118 FBD0                  BEQ Serial_read
  205    0000011A 0168                  LDR R1, [R0]                           
                                                          ; Le a resial e joga
                                                  em R1
  206    0000011C 7047                  BX LR
  207                           ;=============================================
                                ==================================;
  208                           ;                       Escreve na serial o
                                 valor contido em R1                 ;
  209                           ;                       -> Aux: R2            
                                                                  ;
  210                           ;=============================================
                                ==================================;
  211                           Serial_write:    
  212    0000011E 8269                  LDR R2, [R0, #UART_FR]                 
                                                          ; status da
                                                  UART
  213    00000120 12F0800F              TST R2, #TXFE_BIT                      
                                                          ; transmissor
                                                  vazio?
  214    00000124 FBD0                  BEQ Serial_write
  215                                   
  216    00000126 0160                  STR R1, [R0]                           
                                                          ; escreve no
                                                  registrador de dados da UART0
                                                  (transmite)
  217    00000128 7047                  BX LR
  218                           ;=============================================
                                ==================================;
  219                           ;                  -> Habilita UART que
                                 estiver no registrador R2              
                                 ;
  220                           ;                  -> Input: R2               
                                                                  ;
  221                           ;                  -> Aux:   R0, R1           
                                                                  ;
  222                           ;=============================================
                                ==================================;
  223                           UART_enable:                                  
                                          ; -> habilita UART0
  224    0000012A 03B4                  PUSH {R0, R1}
  225    0000012C 7548                  LDR R0, =SYSCTL_BASE                   
                                                          ; carrega o valor de
                                                  SYSCTL_BASE em R0
  226    0000012E D0F81816              LDR R1, [R0, #SYSCTL_RCGCUART]         
                                                          ; R1 = [R0 +
                                                  #SYSCTL_RCGCUART]
  227    00000132 41EA0201              ORR R1, R2                             
                                                          ; R2 ou R1 e salva em
                                                  R1
  228    00000136 C0F81816              STR R1, [R0, #SYSCTL_RCGCUART]         
                                                          ; [R0, #SYSCTL_RCGCUA
                                                 RT] = R1
  229                           
  230    0000013A D0F8181A      waitu   LDR R1, [R0, #SYSCTL_PRUART]           
                                                          ; R1 = [R0 +
                                                  #SYSCTL_PRUART]
  231    0000013E 91EA020F              TEQ R1, R2                             
                                                          ; Verifica se clock
                                                  da UART0 está abilitado
  232    00000142 FAD1                  BNE waitu
  233                                   
  234                           return_UART_enable
  235    00000144 02BC                  POP {R1}
  236    00000146 01BC                  POP {R0}
  237    00000148 7047                  BX LR
  238                           ;=============================================
                                ==================================;
  239                           ;                  -> Configuracao da UART que
                                 estiver no registrador R2        ;
  240                           ;                  -> Input: R2               
                                                                  ;
  241                           ;                  -> Aux:   R1               
                                                                  ;
  242                           ;=============================================
                                ==================================;
  243                           UART_config:
  244    0000014A 02B4                  PUSH {R1}
  245    0000014C 116B                  LDR R1, [R2, #UART_CTL]                
                                                          ; R1 = [R0 +
                                                  #SYSCTL_RCGCUART]
  246    0000014E 21F00101              BIC R1, #0x01                          
                                                          ; desabilita UART
                                                  (bit UARTEN = 0)
  247    00000152 1163                  STR R1, [R2, #UART_CTL]                
                                                          ; [R2, #UART_CTL] =
                                                  R1
  248                           
  249                                   ; clock = 16MHz, baud rate = 14400
                                 bps
  250    00000154 4FF04501              MOV R1, #69                            
                                                          ; R1 = #69
  251    00000158 5162                  STR R1, [R2, #UART_IBRD]               
                                                          ; [R2, #UART_IBRD] =
                                                  R1
  252    0000015A 4FF01D01              MOV R1, #29                            
                                                          ; R1 = #29
  253    0000015E 9162                  STR R1, [R2, #UART_FBRD]               
                                                          ; [R2, #UART_FBRD] =
                                                  R1
  254                                   
  255                                   ; 7 bits, 1 stop, with parity, FIFOs
                                 disabled, no interrupts                       
                                          ; R1 = #0x60
  256    00000160 4FF04601              MOV R1, #01000110b
  257    00000164 D162                  STR R1, [R2, #UART_LCRH]               
                                                          ; [R2 + #UART_LCRH] =
                                                  R1
  258                                   
  259                                   ; clock source = system clock
  260    00000166 4FF00001              MOV R1, #0x00                          
                                                          ; R1 = #0x00  
                                                  
  261    0000016A C2F8C81F              STR R1, [R2, #UART_CC]                 
                                                          ; [R2 + #UART_CC] =
                                                  R1
  262                                   
  263    0000016E 116B                  LDR R1, [R2, #UART_CTL]                
                                                          ; R1 = [R2,
                                                  #UART_CTL] 
  264    00000170 41F00101              ORR R1, #0x01                          
                                                          ; R1 = R1 OU R0 ->
                                                  habilita UART (bit UARTEN =
                                                  1)
  265    00000174 1163                  STR R1, [R2, #UART_CTL]                
                                                          ; [R2, #UART_CTL] =
                                                  R1
  266                                   
  267    00000176 02BC                  POP {R1}
  268    00000178 7047                  BX LR
  269                           ;=============================================
                                ==================================;
  270                           ;                -> Habilita a função especial
                                 do GPIO no registrador R0        ;
  271                           ;                -> Input: R0, R1             
                                                                  ;
  272                           ;                -> Aux:   R2                 
                                                                  ;
  273                           ;=============================================
                                ==================================;
  274                           GPIO_special:
  275    0000017A 04B4                  PUSH {R2}
  276    0000017C D0F82024              LDR R2, [R0, #GPIO_AFSEL]              
                                                          ; R2 = [R0,
                                                  #GPIO_AFSEL]
  277    00000180 42EA0102              ORR R2, R1                             
                                                          ; R2 = R2 ou R1      
                                                       
  278    00000184 C0F82024              STR R2, [R0, #GPIO_AFSEL]              
                                                          ; [R0, #GPIO_AFSEL] =
                                                  R2
  279                           
  280    00000188 D0F81C25              LDR R2, [R0, #GPIO_DEN]                
                                                          ; R2 = [R0,
                                                  #GPIO_DEN]
  281    0000018C 42EA0102              ORR R2, R1                             
                                                          ; R2 = R2 ou R1
                                                  
  282    00000190 C0F81C25              STR R2, [R0, #GPIO_DEN]                
                                                          ; [R0, #GPIO_DEN] =
                                                  R2
  283                           
  284    00000194 04BC                  POP {R2}
  285    00000196 7047                  BX LR
  286                           ;=============================================
                                ==================================;
  287                           ;                -> Seleciona a função
                                 especial do GPIO no registrador R0      
                                 ;
  288                           ;                -> Input: R0, R1             
                                                                  ;
  289                           ;                -> Aux:   R3                 
                                                                  ;
  290                           ;=============================================
                                ==================================;
  291                           GPIO_select:
  292    00000198 08B4                  PUSH {R3}
  293    0000019A D0F82C35              LDR R3, [R0, #GPIO_PCTL]
  294    0000019E 23EA0103              BIC R3, R1
  295    000001A2 43EA0203              ORR R3, R2 ; seleciona bits especiais
  296    000001A6 C0F82C35              STR R3, [R0, #GPIO_PCTL]
  297    000001AA 08BC                  POP {R3}
  298    000001AC 7047                  BX LR
  299                           ;=============================================
                                ==================================;
  300                           ;                  -> Habilita o GPIO que
                                 estiver na porta R0                  
                                 ;
  301                           ;                  -> Input: R0               
                                                                  ;
  302                           ;                  -> Aux:   R1, R2           
                                                                  ;
  303                           ;=============================================
                                ==================================;
  304                           Enable_port:                                  
                                          ; -> habilita o GPIO da porta
                                 R0
  305    000001AE 06B4                  PUSH {R1, R2}
  306    000001B0 554A                  LDR R2, =SYSCTL_RCGCGPIO_R             
                                                          ; carrega o valor de
                                                  SYSCTL_RCGCGPIO_R em
                                                  R2
  307    000001B2 1168                  LDR R1, [R2]                           
                                                          ; carrega o valor que
                                                  R2 "aponta" em R1
  308    000001B4 41EA0001              ORR R1, R0                             
                                                          ; operação de OU com
                                                  R1 e R0
  309    000001B8 1160                  STR R1, [R2]                           
                                                          ; carrega o valor de
                                                  R1 em R2
  310                           check      
  311    000001BA 544A                  LDR R2, =SYSCTL_PRGPIO_R               
                                                          ; carrega SYSCTL_PRGP
                                                 IO_R em R2
  312    000001BC 1168                  LDR R1, [R2]                           
                                                          ; carrega o valor que
                                                  R2 "aponta" em R1
  313    000001BE 0142                  TST R1, R0                             
                                                          ; verifica se o clock
                                                  esta ativo
  314    000001C0 FBD0                  BEQ check                              
                                                      ; se ainda nao estiver
                                              ativo volta para check
  315                           return_Enable_port
  316    000001C2 04BC                  POP {R2}
  317    000001C4 02BC                  POP {R1}
  318    000001C6 7047                  BX LR
  319                           ;=============================================
                                ==================================;
  320                           ;     Recebe um numero base + um numero para
                                 colocar no final, salva em R6      ;
  321                           ;     Input -> R1, R6                         
                                                                  ;
  322                           ;     Aux -> R7, R8                           
                                                                  ;
  323                           ;=============================================
                                ==================================;
  324                           Make_number:
  325    000001C8 2DE98001              PUSH {R7, R8}
  326    000001CC 4FF03008              MOV R8, #0x30
  327    000001D0 4FF00A07              MOV R7, #10
  328    000001D4 06FB07F6              MUL R6, R6, R7
  329    000001D8 A1EB0801              SUB R1, R1, R8
  330    000001DC 0E44                  ADD R6, R6, R1
  331    000001DE 0AF1010A              ADD R10, R10, #1
  332    000001E2 BDE88001              POP {R7, R8}
  333    000001E6 7047                  BX LR
  334                           ;=============================================
                                ==================================;
  335                           ;               -> Printa na serial o valor
                                 contido em R1                       ;
  336                           ;               -> Input: R1, R11             
                                                                  ;
  337                           ;               -> Aux: R7, R8 e R9           
                                                                  ;
  338                           ;=============================================
                                ==================================;
  339                           Show_result:
  340    000001E8 00B5                  PUSH {LR}
  341    000001EA 2DE98001              PUSH {R7, R8}                          
                                                       ; Conserva os registrado
                                              res
  342                           
  343    000001EE 4FF0AA07              MOV R7, #0xaa                          
                                                          ; Dado de stop para
                                                  pilha
  344    000001F2 80B4                  PUSH {R7}                              
                                                       ; aplica na pilha o stop
                                                
  345    000001F4 4FF00A07              MOV R7, #10
  346                           
  347    000001F8 BBF1020F              CMP R11, #2                            
                                                           ; R11 == 2 -> Div
                                                   por zero
  348    000001FC 02BF                  ITTT EQ
  349    000001FE 4521                    MOVEQ R1, #69                        
                                                              ; Em hexa - 'E'
                                                      (0x45) eh sem graça
  350    00000200 02B4                    PUSHEQ {R1}
  351    00000202 1AE0                    BEQ Print_result
  352                           
  353    00000204 BBF1010F              CMP R11, #1                            
                                                           ; R11 == 1 -> numero
                                                   negativo
  354    00000208 01BF                  ITTTT EQ
  355    0000020A 02B4                    PUSHEQ {R1}
  356    0000020C 2D21                    MOVEQ R1, #45
  357    0000020E FFF786FF                BLEQ Serial_write
  358    00000212 02BC                    POPEQ {R1}
  359                           
  360    00000214 0029                  CMP R1, #0                             
                                                          ; Se resultado igual
                                                  a zero nao tem 
  361    00000216 02BF                  ITTT EQ                                
                                                       ; pq decompor o
                                               numero
  362    00000218 3031                    ADDEQ R1, R1, #0x30
  363    0000021A 02B4                    PUSHEQ {R1}
  364    0000021C 0DE0                    BEQ Print_result
  365                           Decomposition:                                
                                          ; Pega o resto da divisao por
                                 10
  366    0000021E 0029                  CMP R1, #0                             
                                                          ; e joga na
                                                  pilha
  367    00000220 0BD0                  BEQ Print_result
  368    00000222 B1FBF7F8              UDIV R8, R1, R7
  369    00000226 08FB07F9              MUL R9, R8, R7 
  370    0000022A A1EB0909              SUB R9, R1, R9
  371    0000022E 09F13009              ADD R9, R9, #0x30
  372    00000232 4DF8049D              PUSH {R9}
  373    00000236 4146                  MOV R1, R8
  374    00000238 F1E7                  B Decomposition
  375                           Print_result                                  
                                          ; Tira numero a numero da pilha
  376    0000023A 02BC                  POP {R1}                               
                                                      ; ate chegar no 0xaa e
                                              vai 
  377    0000023C AA29                  CMP R1, #0xaa                          
                                                          ; mostrando na
                                                  tela
  378    0000023E 08BF                  IT EQ
  379    00000240 02E0                  BEQ End_show_result
  380    00000242 FFF76CFF              BL Serial_write
  381    00000246 F8E7                  B Print_result
  382                           End_show_result:
  383    00000248 BDE88001              POP {R7, R8}
  384    0000024C 00BD                  POP {PC}
  385                           ;=============================================
                                ==================================;
  386                           ;                         Gera nova linha na
                                 serial                             ;          
                                                          
  387                           ;=============================================
                                ==================================;
  388                           New_line:
  389    0000024E 02B5                  PUSH {R1, LR}
  390    00000250 4FF00A01              MOV R1, #10
  391    00000254 FFF763FF              BL Serial_write
  392    00000258 4FF00D01              MOV R1, #13
  393    0000025C FFF75FFF              BL Serial_write
  394    00000260 02BD                  POP {R1, PC}
  395                           ;=============================================
                                ==================================;
  396                           ;               -> Reseta todas as variáveis
                                 do ambiente                        ;          
                                                            
  397                           ;=============================================
                                ==================================;
  398                           Reset_all:
  399    00000262 4FF00001             MOV R1, #0
  400    00000266 4FF00002             MOV R2, #0
  401    0000026A 4FF00003             MOV R3, #0
  402    0000026E 4FF00004             MOV R4, #0
  403    00000272 4FF00005             MOV R5, #0
  404    00000276 4FF00006             MOV R6, #0
  405    0000027A 4FF0000A             MOV R10, #0
  406    0000027E 4FF0000B             MOV R11, #0
  407    00000282 7047                 BX LR
  408                           ;=============================================
                                ==================================;
  409                           ;               -> Verefica se a entrada é uma
                                 eperacao valida                  ;
  410                           ;               -> Output: R4                 
                                                                  ; 
  411                           ;=============================================
                                ==================================;
  412                           Check_operation:
  413    00000284 2A29                  CMP R1, #42                            
                                                  ; MULTIPICACAO
  414    00000286 08BF                  IT EQ                                  
                                             ; MOVEQ R2, #0
  415    00000288 0124                    MOVEQ R4, #1
  416                           
  417    0000028A 2B29                  CMP R1, #43                            
                                                  ; SOMA
  418    0000028C 08BF                  IT EQ
  419    0000028E 0224                    MOVEQ R4, #2
  420                                     
  421    00000290 2D29                  CMP R1, #45                            
                                                  ; SUB
  422    00000292 08BF                  IT EQ
  423    00000294 0324                    MOVEQ R4, #3
  424                                     
  425    00000296 2F29                  CMP R1, #47                            
                                                  ; DIV
  426    00000298 08BF                  IT EQ
  427    0000029A 0424                    MOVEQ R4, #4
  428    0000029C 7047                  BX LR
  429                           ;=============================================
                                ==================================;
  430                           ;       Realiza a operação contida em R4 entre
                                 R3 e R5, salva em R1             ;
  431                           ;       -> Input: R4, R3, R5                  
                                                                  ;
  432                           ;=============================================
                                ==================================;
  433                           Calculate
  434    0000029E 00B5                  PUSH {LR}
  435                           
  436    000002A0 4FF03D01              MOV R1, #61
  437    000002A4 FFF73BFF              BL Serial_write
  438                           
  439    000002A8 012C                  CMP R4, #1                            
                                                  ; MULTIPICACAO
  440    000002AA 08BF                  IT EQ
  441    000002AC 03FB05F1                MULEQ R1, R3, R5
  442                           
  443    000002B0 022C                  CMP R4, #2                            
                                                  ; SOMA
  444    000002B2 08BF                  IT EQ
  445    000002B4 5919                    ADDEQ R1, R3, R5
  446                                     
  447    000002B6 032C                  CMP R4, #3                            
                                                  ; SUB
  448    000002B8 08BF                  IT EQ
  449    000002BA 00F007F8                BLEQ Execute_sub
  450                           
  451    000002BE 042C                  CMP R4, #4                            
                                                  ; DIV
  452    000002C0 08BF                  IT EQ
  453    000002C2 00F00AF8                BLEQ Execute_div
  454                           
  455    000002C6 FFF78FFF              BL Show_result
  456                           
  457    000002CA 00BD                  POP {PC}   
  458                           ;=============================================
                                ==================================;
  459                           ;     Executa subtracao entre R3 e R5, salva
                                 em R1. Se negativo R11 = 1         ;
  460                           ;     Input: R3, R5                           
                                                                  ;
  461                           ;=============================================
                                ==================================;
  462                           Execute_sub:  
  463    000002CC 591B                  SUBS R1, R3, R5
  464    000002CE 42BF                  ITTT MI
  465    000002D0 4FF0010B                MOVMI R11, #1
  466    000002D4 C943                    MVNMI R1, R1
  467    000002D6 491C                    ADDMI R1, R1, #1
  468    000002D8 7047                  BX LR
  469                           ;=============================================
                                ==================================;
  470                           ;     Executa divisao entre R3 e R5, salva em
                                 R1. Se invalida R11 = 2           ;
  471                           ;     Input: R3, R5                           
                                                                  ;
  472                           ;=============================================
                                ==================================;
  473                           Execute_div:
  474    000002DA B3FBF5F1              UDIV R1, R3, R5
  475    000002DE 002D                  CMP R5, #0
  476    000002E0 08BF                  IT EQ
  477    000002E2 4FF0020B                MOVEQ R11, #2
  478    000002E6 7047                  BX LR
  479                           ;=============================================
                                ==================================;
  480                           ;                Verifica se o input eh um
                                 numero ou nao                       
                                 ;
  481                           ;                Input: R1                    
                                                                  ;
  482                           ;=============================================
                                ==================================;
  483                           NAN:
  484    000002E8 4FF00007              MOV R7, #0
  485    000002EC 3029                  CMP R1, #0x30
  486    000002EE 38BF                  IT LO
  487    000002F0 0127                    MOVLO R7, #1
  488    000002F2 3929                  CMP R1, #0x39
  489    000002F4 88BF                  IT HI
  490    000002F6 0127                    MOVHI R7, #1
  491    000002F8 7047                  BX LR
  492                           
  492.1                                  TABLE.32
  492.2  000002FC 00800540              Reference on line 81
  492.3  00000300 00C00040              Reference on line 89,92
  492.4  00000304 00E00F40              Reference on line 225
  492.5  00000308 08E60F40              Reference on line 306
  492.6  0000030C 08EA0F40              Reference on line 311
  493                                   END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 784         #
##############################



